name: New Service Bus SAS Token
on: [workflow_call]

jobs:
  publish:
    runs-on: windows-latest
    env:
      KEY_VAULT_NAME: secrets-vault7839
      SB_NAMESPACE: githubactions
      SB_POLICY_NAME: myauthrule
      SB_POLICY_KEY_NAME: myauthrulePrimaryKey

    steps:
    - name: Check out repository
      uses: actions/checkout@v2

    - name: Log into Azure using github secret AZURE_CREDENTIALS
      uses: Azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        enable-AzPSSession: true

    - name: Get Service Bus Policy Key
      uses: Azure/get-keyvault-secrets@v1
      with:
        keyvault: ${{ env.KEY_VAULT_NAME }}
        secrets: ${{ env.SB_POLICY_KEY_NAME }}
      id: sbPrimaryKey

    - name: Generate Service Bus SAS token
      uses: azure/powershell@v1
      with:
        inlineScript: |
          $null = [Reflection.Assembly]::LoadWithPartialName("System.Web")
          
          #Set Variables
          $keyVaultName="${{ env.KEY_VAULT_NAME }}"
          $serviceBusNameSpace="${{ env.SB_NAMESPACE }}"
          $accessPolicyName="${{ env.SB_POLICY_NAME }}"
          $accessPolicyKeyName="${{ env.SB_POLICY_KEY_NAME }}"
          $dateTime=(Get-Date).ToString()
          $URI="$serviceBusNameSpace.servicebus.windows.net"
          $accessPolicyKey="${{ steps.sbPrimaryKey.outputs.$accessPolicyKeyName }}"
          
          #Generate Temp SAS Token
          ##Token expires now+600(10 min)
          $expires=([DateTimeOffset]::Now.ToUnixTimeSeconds())+600
          $signatureString=[System.Web.HttpUtility]::UrlEncode($URI)+ "`n" + [string]$expires
          $HMAC = New-Object System.Security.Cryptography.HMACSHA256
          $HMAC.key = [Text.Encoding]::ASCII.GetBytes($accessPolicyKey)
          $signature = $HMAC.ComputeHash([Text.Encoding]::ASCII.GetBytes($signatureString))
          $signature = [Convert]::ToBase64String($signature)
          $SASToken = "SharedAccessSignature sr=" + [System.Web.HttpUtility]::UrlEncode($URI) + "&sig=" + [System.Web.HttpUtility]::UrlEncode($signature) + "&se=" + $expires + "&skn=" + $accessPolicyName
          
          #Set Temp SAS token in Azure Key Vault
          Write-Output "Update SAS token in: [$keyVaultName]" 
          $secretToken = ConvertTo-SecureString -String $SASToken -AsPlainText -Force
          $tags = @{ "Automation" = "Github-Workflow";  "Temp-SAS" = "true"; "Generated-On" = "$dateTime"}
          $null = Set-AzKeyVaultSecret -VaultName $keyVaultName -Name "$accessPolicyName-SAS" -SecretValue $secretToken -Tags $tags
          Write-Output 'SAS Token Created and saved to Key Vault Secret: [$accessPolicyName-SAS] '
        azPSVersion: 'latest'