name: Update Azure VM passwords
on: 
  workflow_dispatch:
  schedule:
    - cron:  '0 9 * * 1'

jobs:
  publish:
    runs-on: windows-latest
    env:
      KEY_VAULT_NAME: github-secrets-vault3

    steps:
    - name: Check out repository
      uses: actions/checkout@v2

    - name: Log into Azure using github secret AZURE_CREDENTIALS
      uses: Azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        enable-AzPSSession: true

    - name: Generate Random Char Set using System.Web Assembly and set environment
      shell: powershell
      run: |
        [system.reflection.assembly]::LoadWithPartialName("System.Web")
        [String]$random = [System.Web.Security.Membership]::GeneratePassword(64, 32)
        echo ::add-mask::$random
        echo "RANDOM_CHAR_SET=$random" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

    - name: Rotate VM administrator passwords
      uses: azure/powershell@v1
      with:
        inlineScript: | 
          $keyVaultName = "${{ env.KEY_VAULT_NAME }}"
          Write-Output "Creating array of all VM names in key vault: [$keyVaultName]."
          $keys = (Get-AzKeyVaultSecret -VaultName $keyVaultName).Name
          Write-Output "Looping through each VM key and changing the local admin password"
          Foreach ($key in $keys) {
            $vmName = $key
            If (Get-AzVm -Name $vmName -ErrorAction SilentlyContinue) {
              $resourceGroup = (Get-AzVm -Name $vmName).ResourceGroupName
              $location = (Get-AzVm -Name $vmName).Location
              Write-Output "Server found: [$vmName]... Checking if VM is in a running state"
              $vmObj = Get-AzVm -ResourceGroupName $resourceGroup -Name $vmName -Status
              [String]$vmStatusDetail = "deallocated"
              Foreach ($vmStatus in $vmObj.Statuses) {
                If ($vmStatus.Code -eq "PowerState/running") {
                  [String]$vmStatusDetail = $vmStatus.Code.Split("/")[1]
                }
              }
              If ($vmStatusDetail -ne "running") {
                Write-Warning "VM is NOT in a [running] state... Skipping"
                Write-Output "--------------------------"
              }
              Else {
                Write-output "VM is in a [running] state... Generating new secure Password for: [$vmName]"
                $passwordGen = ("$${{ env.RANDOM_CHAR_SET }}" | sort {Get-Random})[0..15] -join ''
                $secretPassword = ConvertTo-SecureString -String $passwordGen -AsPlainText -Force
                Write-Output "Updating key vault: [$keyVaultName] with new random secure password for virtual machine: [$vmName]"
                $Date = (Get-Date).tostring("dd-MM-yyyy")
                $Tags = @{ "Automation" = "Github-Workflow";  "Password-Rotated" = "true"; "Password-Rotated-On" = "$Date"}
                $null = Set-AzKeyVaultSecret -VaultName $keyVaultName -Name "$vmName" -SecretValue $secretPassword -Tags $Tags
                Write-Output "Updating VM with new password..."
                $adminUser = (Get-AzVm -Name $vmName | Select-Object -ExpandProperty OSProfile).AdminUsername
                $Cred = New-Object System.Management.Automation.PSCredential ($adminUser, $secretPassword)
                $null = Set-AzVMAccessExtension -ResourceGroupName $resourceGroup -Location $location -VMName $vmName -Credential $Cred -typeHandlerVersion "2.0" -Name VMAccessAgent
                Write-Output "Vm password changed successfully."
                Write-Output "--------------------------"
              }
            }
            Else {
             Write-Warning "VM NOT found: [$vmName]."
             Write-Output "--------------------------"
            }
          }
        azPSVersion: 'latest'
